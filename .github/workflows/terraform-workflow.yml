name: 'EC2 Instance Creation'

on:
  push:
    branches: [ "main" ]
    paths:
    - terraform-github/**
    
  pull_request:
    branches: [ "main" ]
    paths:
    - terraform-github/**

  workflow_dispatch:

jobs:
  terraform:
    name: 'EC2 creation'
    runs-on: amazon-linux
    environment: develop
    permissions: write-all
    env:  
       AWS_ACCESS_KEY_ID: ${{ secrets.ACCESS_KEY }}
       AWS_SECRET_ACCESS_KEY: ${{ secrets.SECRET_KEY }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform-github

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI 
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3

    # Initialize a new or existing Terraform working directory 
    - name: Terraform Init
      id: init
      run: terraform init

    # Validates terraform configuration files
    - name: Terraform Validation
      id: validate
      run: terraform validate

    # Checks that all Terraform configuration files adhere to a canonical format.
    - name: Terraform plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color -input=false
      continue-on-error: true

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
         PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
         script: |
           const output = `#### Terraform Initialization: \`${{ steps.init.outcome }}\`
           #### Terraform Validation: \`${{ steps.validate.outcome }}\`
           #### Terraform Plan: \`${{ steps.plan.outcome }}\`
 
           <details><summary>Show Plan</summary>
 
           \`\`\`\n
           ${process.env.PLAN}
           \`\`\`
 
           </details>
           *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
 
           github.rest.issues.createComment({
             issue_number: context.issue.number,
             owner: context.repo.owner,
             repo: context.repo.repo,
             body: output
           })

    
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
 
    # Apply terraform plan
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false